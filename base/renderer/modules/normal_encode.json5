// Octahedron mapping for normals.
//
// Map the sphere to an octahedron, project down into the z=0 plane, and then
// reflect the -z hemisphere over the appropriate diagonal. The result fills
// the [-1, +1]^2 square. Store the (u,v) coordinates into the square as RG8.
// This provides near-uniform mapping.
{
  name: "normal_encode",
  imports: [
    "sign_not_zero"
  ],
  source: "
    f32x2 normal_encode(f32x3 normal) {
      // Project the sphere onto the octahedron and then onto the XY plane.
      f32x2 p = normal.xy * (1.0 / (abs(normal.x) + abs(normal.y) + abs(normal.z)));

      // Reflect the folds of the lower hemisphere over the diagonals.
      f32x2 folds = normal.z <= 0.0 ? (1.0 - abs(p.yx)) * sign_not_zero(p) : p;

      // Remap [-1, 1] to [0, 1].
      return folds * 0.5 + 0.5;
    }
  "
}
