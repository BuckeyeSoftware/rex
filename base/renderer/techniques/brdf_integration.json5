{
  name: "brdf_integration",
  configurations: [
    {
      name: "DEFAULT"
    }
  ],
  shaders: [
    {
      type: "vertex",
      outputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      imports: [
        "fullscreen_triangle"
      ],
      source: "
        void main() {
          f32x4 triangle = fullscreen_triangle();
          rx_position = f32x4(triangle.xy, 0.0, 1.0);
          vs_coordinate = triangle.zw;
        }
      "
    },
    {
      type: "fragment",
      inputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      outputs: [
        { name: "fs_color",      type: "f32x4" }
      ],
      imports: [
        "hammersley",
        "importance_sample_ggx",
        "schlick",
        "saturate"
      ],
      source: "
        f32x2 integrate_brdf(f32 roughness, f32 n_dot_v) {
          // x = sin, y = 0, z = cos.
          f32x3 v = f32x3(sqrt(1.0 - n_dot_v * n_dot_v), 0.0f, n_dot_v);

          f32 a = 0.0;
          f32 b = 0.0;

          const u32 SAMPLES = 1024u;

          // Straight upwards for this integration.
          const f32x3 N = f32x3(0.0, 0.0, 1.0);

          for (u32 i = 0u; i < SAMPLES; i++) {
            f32x2 Xi = hammersley(i, SAMPLES);

            // Sample microfacet direction.
            f32x3 h = importance_sample_ggx(Xi, roughness, N);

            // Light direction.
            f32x3 l = 2.0 * dot(v, h) * h - v;

            f32 n_dot_l = saturate(dot(N, l));
            f32 n_dot_h = saturate(dot(N, h));
            f32 v_dot_h = saturate(dot(v, h));

            if (n_dot_l > 0.0) {
              f32 g = schlick(n_dot_l, n_dot_v, roughness);
              f32 v = g * v_dot_h / (n_dot_h * n_dot_v);
              f32 f = pow(1.0 - v_dot_h, 5.0);

              a += (1.0 - f) * v;
              b += f * v;
            }
          }

          return f32x2(a, b) / as_f32(SAMPLES);
        }

        void main() {
          f32x2 scale_bias = integrate_brdf(vs_coordinate.x, vs_coordinate.y);
          fs_color = f32x4(scale_bias, 0.0, 1.0);
        }
      "
    }
  ]
}
