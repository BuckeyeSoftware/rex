{
  name: "lens_distortion",
  configurations: [
    {
      name: "DEFAULT"
    }
  ],
  uniforms: [
    { name: "u_parameters", type: "f32x3" },
    { name: "u_color",      type: "sampler2D", value: 0 }
  ],
  shaders: [
    {
      type: "vertex",
      outputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      imports: [
        "fullscreen_triangle"
      ],
      source: "
        void main() {
          f32x4 triangle = fullscreen_triangle();
          rx_position = f32x4(triangle.xy, 0.0, 1.0);
          vs_coordinate = triangle.zw - f32x2(0.5);
        }
      "
    },
    {
      type: "fragment",
      inputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      outputs: [
        { name: "fs_color",      type: "f32x4" }
      ],
      source: "
        void main() {
          f32 scale = u_parameters.x;
          f32 dispersion = u_parameters.y;
          f32 distortion = u_parameters.z;

          // Index of refraction of each color channel causing chromatic dispersion.
          f32x3 eta = f32x3(1.0 + dispersion * 0.9, 1.0 + dispersion * 0.6, 1.0 + dispersion * 0.3);

          f32 f = 1.0 + dot(vs_coordinate, vs_coordinate) * distortion;

          f32x2 r = (f * eta.r) * scale * vs_coordinate + 0.5;
          f32x2 g = (f * eta.g) * scale * vs_coordinate + 0.5;
          f32x2 b = (f * eta.b) * scale * vs_coordinate + 0.5;

          f32x3 distort = f32x3(0.0);
          distort.r = rx_texture2D(u_color, r).r;
          distort.g = rx_texture2D(u_color, g).g;
          distort.b = rx_texture2D(u_color, b).b;

          fs_color = f32x4(distort, 1.0);
        }
      "
    }
  ]
}
