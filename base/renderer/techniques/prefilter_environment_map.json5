{
  name: "prefilter_environment_map",
  uniforms: [
    { name: "u_sampler",            type: "samplerCM", value: 0 },
    { name: "u_roughness",          type: "float" },
    { name: "u_grading_lut",        type: "samplerCM", when: "HAS_GRADING_LUT" },
    { name: "u_grading_properties", type: "vec2f",     when: "HAS_GRADING_LUT" }
  ],
  permutes: [
    "HAS_GRADING_LUT"
  ],
  shaders: [
    {
      type: "vertex",
      outputs: [
        { name: "vs_coordinate", type: "vec2f" }
      ],
      imports: [
        "fullscreen_triangle"
      ],
      source: "
        void main() {
          vec4f triangle = fullscreen_triangle();
          rx_position = vec4f(triangle.xy, 0.0, 1.0);
          vs_coordinate = triangle.zw;
        }
      "
    },{
      type: "fragment",
      inputs: [
        { name: "vs_coordinate", type: "vec2f" }
      ],
      imports: [
        "hammersley",
        "importance_sample_ggx"
      ],
      outputs: [
        { name: "fs_color_px", type: "vec4f" },
        { name: "fs_color_nx", type: "vec4f" },
        { name: "fs_color_py", type: "vec4f" },
        { name: "fs_color_ny", type: "vec4f" },
        { name: "fs_color_pz", type: "vec4f" },
        { name: "fs_color_nz", type: "vec4f" }
      ],
      source: "
        vec3f prefilter(float roughness, vec3f r) {
          vec3f n = r;
          vec3f v = r;

          vec3f color = vec3f(0.0);
          float total_weight = 0.0;

          uint samples = 512u;
          for (uint i = 0u; i < samples; i++) {
            vec2f Xi = hammersley(i, samples);
            vec3f h = importance_sample_ggx(Xi, roughness, n);
            vec3f l = 2.0 * dot(v, h) * h - v;

            float n_dot_l = max(0.0, dot(n, l));

            if (n_dot_l > 0.0) {
              vec3f sampled = rx_textureCM(u_sampler, l).rgb;
              #if defined(HAS_GRADING_LUT)
                float z = sampled.z * u_grading_properties.x + u_grading_properties.y;
                color += rx_texture3D(u_grading_lut, vec3f(sampled.xy, z)).rgb * n_dot_l;
              #else
                color += sampled * n_dot_l;
              #endif
              total_weight += n_dot_l;
            }
          }

          return color / total_weight;
        }

        void main() {
          const mat3x3f rotations[6] = mat3x3f[](
            mat3x3f(vec3f( 0.0, 0.0, -1.0), vec3f(0.0, -1.0,  0.0), vec3f(-1.0,  0.0,  0.0)),  // right
            mat3x3f(vec3f( 0.0, 0.0,  1.0), vec3f(0.0, -1.0,  0.0), vec3f( 1.0,  0.0,  0.0)),  // left
            mat3x3f(vec3f( 1.0, 0.0,  0.0), vec3f(0.0,  0.0,  1.0), vec3f( 0.0, -1.0,  0.0)),  // top
            mat3x3f(vec3f( 1.0, 0.0,  0.0), vec3f(0.0,  0.0, -1.0), vec3f( 0.0,  1.0,  0.0)),  // bottom
            mat3x3f(vec3f( 1.0, 0.0,  0.0), vec3f(0.0, -1.0,  0.0), vec3f( 0.0,  0.0, -1.0)),  // front
            mat3x3f(vec3f(-1.0, 0.0,  0.0), vec3f(0.0, -1.0,  0.0), vec3f( 0.0,  0.0,  1.0))); // back

          vec3f direction = normalize(vec3f(vs_coordinate * 2.0 - 1.0, -1.0));

          fs_color_px = vec4f(prefilter(u_roughness, rotations[0] * direction), 1.0);
          fs_color_nx = vec4f(prefilter(u_roughness, rotations[1] * direction), 1.0);
          fs_color_py = vec4f(prefilter(u_roughness, rotations[2] * direction), 1.0);
          fs_color_ny = vec4f(prefilter(u_roughness, rotations[3] * direction), 1.0);
          fs_color_pz = vec4f(prefilter(u_roughness, rotations[4] * direction), 1.0);
          fs_color_nz = vec4f(prefilter(u_roughness, rotations[5] * direction), 1.0);
        }
      "
    }
  ]
}
