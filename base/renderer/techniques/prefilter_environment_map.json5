{
  name: "prefilter_environment_map",
  configurations: [
    {
      name: "DEFAULT",
      variants: [
        "USE_CUBEMAP",
        "USE_HDRI"
      ]
    }
  ],
  uniforms: [
    { name: "u_cubemap",   type: "samplerCM", value: 0, when: "USE_CUBEMAP" },
    { name: "u_hdri",      type: "sampler2D", value: 0, when: "USE_HDRI" },
    { name: "u_face",      type: "s32" },
    { name: "u_roughness", type: "f32" }
  ],
  shaders: [
    {
      type: "vertex",
      outputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      imports: [
        "fullscreen_triangle"
      ],
      source: "
        void main() {
          f32x4 triangle = fullscreen_triangle();
          rx_position = f32x4(triangle.xy, 0.0, 1.0);
          vs_coordinate = triangle.zw;
        }
      "
    },{
      type: "fragment",
      inputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      outputs: [
        { name: "fs_color",      type: "f32x4" }
      ],
      imports: [
        "hammersley",
        "importance_sample_ggx",
        "cubemap_rotations",
        "sample_hdri"
      ],
      source: "
        f32x3 prefilter(f32 roughness, f32x3 r) {
          f32x3 n = r;
          f32x3 v = r;

          f32x3 color = f32x3(0.0);
          f32 total_weight = 0.0;

          u32 samples = 512u;
          for (u32 i = 0u; i < samples; i++) {
            f32x2 Xi = hammersley(i, samples);
            f32x3 h = importance_sample_ggx(Xi, roughness, n);
            f32x3 l = 2.0 * dot(v, h) * h - v;

            f32 n_dot_l = max(0.0, dot(n, l));

            if (n_dot_l > 0.0) {
        #if defined(USE_CUBEMAP)
              color += rx_textureCM(u_cubemap, l).rgb * n_dot_l;
        #elif defined(USE_HDRI)
              color += sample_hdri(u_hdri, l).rgb * n_dot_l;
        #endif
              total_weight += n_dot_l;
            }
          }

          return color / total_weight;
        }

        void main() {
          f32x3 direction = normalize(f32x3(vs_coordinate * 2.0 - 1.0, -1.0));
          fs_color = f32x4(prefilter(u_roughness, CUBEMAP_ROTATIONS[u_face] * direction), 1.0);
        }
      "
    }
  ]
}
