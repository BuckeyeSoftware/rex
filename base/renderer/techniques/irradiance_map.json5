{
  name: "irradiance_map",
  uniforms: [
    { name: "u_sampler",      type: "samplerCM", value: 0  },
    { name: "u_texture_size", type: "int" }
  ],
  shaders: [
    {
      type: "vertex",
      outputs: [
        { name: "vs_coordinate", type: "vec2f" }
      ],
      imports: [
        "fullscreen_triangle"
      ],
      source: "
        void main() {
          vec4f triangle = fullscreen_triangle();
          rx_position = vec4f(triangle.xy, 0.0, 1.0);
          vs_coordinate = triangle.zw;
        }
      "
    },{
      type: "fragment",
      inputs: [
        { name: "vs_coordinate", type: "vec2f" }
      ],
      outputs: [
        { name: "fs_color_px", type: "vec4f" },
        { name: "fs_color_nx", type: "vec4f" },
        { name: "fs_color_py", type: "vec4f" },
        { name: "fs_color_ny", type: "vec4f" },
        { name: "fs_color_pz", type: "vec4f" },
        { name: "fs_color_nz", type: "vec4f" }
      ],
      source: "
        void main() {
          const mat3x3f rotations[6] = mat3x3f[](
            mat3x3f(vec3f( 0.0, 0.0, -1.0), vec3f(0.0, -1.0,  0.0), vec3f(-1.0,  0.0,  0.0)),  // right
            mat3x3f(vec3f( 0.0, 0.0,  1.0), vec3f(0.0, -1.0,  0.0), vec3f( 1.0,  0.0,  0.0)),  // left
            mat3x3f(vec3f( 1.0, 0.0,  0.0), vec3f(0.0,  0.0,  1.0), vec3f( 0.0, -1.0,  0.0)),  // top
            mat3x3f(vec3f( 1.0, 0.0,  0.0), vec3f(0.0,  0.0, -1.0), vec3f( 0.0,  1.0,  0.0)),  // bottom
            mat3x3f(vec3f( 1.0, 0.0,  0.0), vec3f(0.0, -1.0,  0.0), vec3f( 0.0,  0.0, -1.0)),  // front
            mat3x3f(vec3f(-1.0, 0.0,  0.0), vec3f(0.0, -1.0,  0.0), vec3f( 0.0,  0.0,  1.0))); // back

          vec3f base_normal = normalize(vec3f(vs_coordinate * 2.0 - 1.0, -1.0));

          vec4f colors[6] = vec4f[](
            vec4f(0.0),
            vec4f(0.0),
            vec4f(0.0),
            vec4f(0.0),
            vec4f(0.0),
            vec4f(0.0));

          for (int face = 0; face < 6; face++) {
            vec3f normal = rotations[face] * base_normal;
            vec4f color = vec4f(0.0);
            for (int i = 0; i < 6; i++) {
              mat3x3f rotation = rotations[i];
              for (int x = 0; x < u_texture_size; x++) {
                for (int y = 0; y < u_texture_size; y++) {
                  vec2f coordinate = vec2f(float(x) / float(u_texture_size), float(y) / float(u_texture_size));
                  vec3f direction = rotation * normalize(vec3f(coordinate * 2.0 - 1.0, -1.0));
                  float mul = max(dot(normal, direction), 0.0);
                  color += vec4f(rx_textureCM(u_sampler, direction).rgb * mul, mul);
                }
              }
            }
            colors[face] = vec4f(color.rgb / color.a, 1.0);
          }

          fs_color_px = colors[0];
          fs_color_nx = colors[1];
          fs_color_py = colors[2];
          fs_color_ny = colors[3];
          fs_color_pz = colors[4];
          fs_color_nz = colors[5];
        }
      "
    }
  ]
}
