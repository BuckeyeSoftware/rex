{
  name: "irradiance_map",
  uniforms: [
    { name: "u_cubemap",      type: "samplerCM", value: 0, when: "USE_CUBEMAP" },
    { name: "u_hdri",         type: "sampler2D", value: 0, when: "USE_HDRI" },
    { name: "u_face",         type: "s32" },
    { name: "u_texture_size", type: "s32" }
  ],
  variants: [
    "USE_CUBEMAP",
    "USE_HDRI"
  ],
  shaders: [
    {
      type: "vertex",
      outputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      imports: [
        "fullscreen_triangle"
      ],
      source: "
        void main() {
          f32x4 triangle = fullscreen_triangle();
          rx_position = f32x4(triangle.xy, 0.0, 1.0);
          vs_coordinate = triangle.zw;
        }
      "
    },{
      type: "fragment",
      inputs: [
        { name: "vs_coordinate", type: "f32x2" }
      ],
      outputs: [
        { name: "fs_color",      type: "f32x4" }
      ],
      imports: [
        "cubemap_rotations",
        "sample_hdri"
      ],
      source: "
        void main() {
          // Starting in the direction of |u_face|.
          f32x3 n = CUBEMAP_ROTATIONS[u_face] * normalize(f32x3(vs_coordinate * 2.0 - 1.0, -1.0));

          f32x3 color = f32x3(0.0);
          f32 total_weight = 0.0;

          for (u32 i = 0; i < 6; i++) {
            f32x3x3 rotation = CUBEMAP_ROTATIONS[i];
            for (s32 x = 0; x < u_texture_size; x++) {
              for (s32 y = 0; y < u_texture_size; y++) {
                f32x2 coordinate = f32x2(x, y) / as_f32(u_texture_size);
                f32x3 direction = rotation * normalize(f32x3(coordinate * 2.0 - 1.0, -1.0));
                f32 weight = max(dot(n, direction), 0.0);
        #if defined(USE_CUBEMAP)
                f32x3 sampled = rx_textureCM(u_cubemap, direction).rgb;
        #elif defined(USE_HDRI)
                f32x3 sampled = sample_hdri(u_hdri, direction).rgb;
        #endif
                color += sampled * weight;
                total_weight += weight;
              }
            }
          }

          color /= total_weight;

          fs_color = f32x4(color, 1.0);
        }
      "
    }
  ]
}
